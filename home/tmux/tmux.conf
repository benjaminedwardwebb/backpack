# .tmux.conf
# This is my tmux configuration
#
# Always invoke tmux prefixed with a set SHELL variable, as follows.
#
# 	SHELL=$(which bash) tmux new-session
#
# This provides caller control over the shell that tmux executes. The
# following configuration does not explicitly set the `default-shell` option,
# so it falls back to the primary default: the value of the environment
# variable SHELL.
#
# See: man tmux | less -p default-shell
#
# links: https://github.com/christoomey/vim-tmux-navigator
# TODO consider: https://github.com/robhurring/tmux-spotify
# TODO consider: https://github.com/tmux-plugins/tpm

# prefix key
unbind-key -n C-b
unbind-key -n C-o
set -g prefix C-o

# Keeps the tmux server running even if no session exists.
# See: man tmux | less -p="exit-empty"
set -s exit-empty off

set-option -s -F user-keys[0] "#{pid}"
set-option -g default-command "bash"
#set-option -g default-shell "bash"

# vi style keys
set-window-option -g mode-keys vi

# fix $TERM variable from screen to xterm-256
set -g default-terminal "screen-256color"

# buffer history
set-option -g history-limit 9000

# Panes
# Smart pane switching with awareness of Vim splits.
#is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
is_vim="ps -t '#{pane_tty}' | grep -q vim"
unbind-key C-n
unbind-key C-b
unbind-key C-p
unbind-key C-q
# TODO: this seems to work on my mac but not on my linux... I don't really use vim panges tho anyways
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
#bind-key -n C-h "select-pane -L"
#bind-key -n C-j "select-pane -D"
#bind-key -n C-k "select-pane -U"
#bind-key -n C-l "select-pane -R"

#bind-key -n C-n if-shell "$is_vim" "send-keys C-n"  "split-window -h -c '#{pane_current_path}'"
#bind-key -n C-b if-shell "$is_vim" "send-keys C-b"  "split-window -v -c '#{pane_current_path}'"
bind-key -n C-n split-window -h -c '#{pane_current_path}'
bind-key -n C-b split-window -v -c '#{pane_current_path}'
bind-key -n C-p if-shell "$is_vim" "send-keys C-p"  "select-pane -l"
bind-key -n C-q if-shell "$is_vim" "send-keys C-q"  "kill-pane"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
#bind-key -T copy-mode-vi C-n split-window -h -c '#{pane_current_path}'
#bind-key -T copy-mode-vi C-b split-window -v -c '#{pane_current_path}'
bind-key -T copy-mode-vi C-n split-window -h -c '#{pane_current_path}'
bind-key -T copy-mode-vi C-b split-window -v -c '#{pane_current_path}'
bind-key -T copy-mode-vi C-p select-pane -l
bind-key -T copy-mode-vi C-q kill-pane
#bind-key -n C-q kill-pane
#bind-key -n C-n split-window -h -c "#{pane_current_path}"
#bind-key -n C-p split-window -v -c "#{pane_current_path}"

# Windows
#bind-key -n C-e if-shell "$is_vim" "send-keys C-e"  "new-window"
bind-key -n C-e if-shell "$is_vim" "send-keys C-e"  "command-prompt -p 'window name:' 'new-window; rename-window %1'"
bind-key -n C-w if-shell "$is_vim" "send-keys C-w"  "kill-window"
# note, this M picks up ESC as well as ALT (w/ current mac terminal settings)
bind-key -n M-K previous-window
bind-key -n M-J next-window
bind-key < swap-window -t -1
bind-key > swap-window -t +1
#bind-key -n K previous-window
#bind-key -n J next-window

#unbind-key -n C-[
#bind-key -n C-[ if-shell "$is_vim" "send-keys C-["  "send-prefix"
#set -g prefix C-[
#bind-key -T copy-mode-vi C-[ send-prefix

# vi-like copy paste
bind-key Escape copy-mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# Map copy-mode y key to a command that copies to the system's clipboard.
#
# Supplying a custom bash function as the command does not appear to work.
# This was tested using my custom `copy` command in my backpack on Berrio.
# To make this work across varying systems (e.g., Darwin and Linux), a tmux
# conditional is used instead. This conditional relies on an environment
# variable named `$system`, which is also defined in my backpack.
%if "#{==:$system,Darwin}"
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
%elif "#{==:$system,Linux}"
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -r -selection clipboard"
%endif

# status line
set -g status off
set -g status-position top
set -g status-justify left
set -g status-interval 15 # TODO will this drain battery?

set -g status-left " #(date +'%Y/%m/%d %H:%M') | #(task-active) | #(task-active-duration) | "
set -g status-left-length 100

set -g status-right "#(spotify-info) | #H | #(battery) | #(uptime-days) "
set -g status-right-length 120
#set -g status-format[1] "#(timew day | head -n 2 | tail -n 1)"
#set -g status-format[1] "#[bg=colour1]#($HOME/backpack/bin/test)#[default]"
set -g status-keys vi

# Theme and color styling.
set -g status-style bg='colour0',fg='colour10'
set-window-option -g window-status-style bg=default,fg='colour10',
set-window-option -g window-status-current-style bg='colour8',fg='colour3'
set -g window-status-current-format "   #W   "
set -g window-status-format " #W "
#set -g window-status-current-format "#[fg=#44475a]#[bg=#bd93f9]#[fg=#f8f8f2]#[bg=#bd93f9] #I #W #[fg=#bd93f9]#[bg=#44475a]"
#set -g window-status-format "#[fg=#f8f8f2]#[bg=#44475a]#I #W #[fg=#44475a] "


set -g pane-border-style fg='colour8'
set -g pane-active-border-style fg='colour8'

set-window-option -g mode-style 'bg=colour9 fg=colour7'
set -g message-command-style 'fg=colour12 bg=colour0'
set -g message-style 'fg=colour12 bg=colour0'
